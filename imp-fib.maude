load ../../systems/imp.maude

fmod FIB is
  pr FVP-NAT . 

  op fib : Nat -> Nat . 

  var N : Nat . 

  eq fib(0) = 0 .
  eq fib(1) = 1 .
  eq fib(N + 1 + 1) = fib(N + 1) + fib(N) . 
endfm

mod FIB+IMP-SEMANTICS is
  pr FIB . 
  pr IMP-SEMANTICS . 
endm

set show advisories off .
set print attribute on .

load ../../rltool.maude

(select FIB+IMP-SEMANTICS  .)
(use tool conrew for validity          on IMP-SYNTAX+MUL with FOFORMSIMPLIFY-IMP-IMPL .)
(use tool varunif for varunif          on FVP-NAT .)
(use tool varsat  for unsatisfiability on IMP-SYNTAX .)
(def-term-set (< done | E:Env >) | true .)
(declare-vars (X:Nat) U (I:Nat) U (A:Nat) U (B:Nat) U (F:Nat) U (A':Nat) U (B':Nat) U (I':Nat) U (F':Nat) .)

--- x     = x
--- x,    = i
--- x,,   = f1
--- x,,,  = f2
--- x,,,, = f

(add-goal loop : (< while (x, <: x) {x, = x, +: 1 ; x,,, = x,, ; x,, = x,,,, ; x,,,, = x,, +: x,,, ; } ~> done
                    | x |-> X  *  x, |-> I * x,, |-> A * x,,, |-> B * x,,,, |-> F >) | (A + B) = (F) =>
                 (< done
		    | x |-> X * x, |-> I' * x,, |-> A' * x,,, |-> B' * x,,,, |-> F' >) | (I') = (X) /\ (F') = (fib(X)) .) 
(start-proof .)

(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
