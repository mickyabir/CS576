load ../imp.maude

fmod REV is
  pr IMP-LIST .

  op rev : List -> List [metadata "80"] .

  var L : List . var N : Nat .

  eq rev(nil) = nil .
  eq rev(N $ L) = rev(L) $ N .
endfm

mod REV+IMP-SYNTAX+MUL is
  pr REV .
  pr IMP-SYNTAX+MUL .
endm

mod REV+IMP-SEMANTICS is
  pr REV .
  pr IMP-SEMANTICS .
endm

set show advisories off .
set print attribute on .

load ../ext/maude-private/contrib/tools/rltool/rltool.maude

(select REV+IMP-SEMANTICS  .)
(use tool conrew for validity          on REV+IMP-SYNTAX+MUL with FOFORMSIMPLIFY-IMP-IMPL .)
(use tool varunif for varunif          on FVP-NAT .)
(use tool varsat  for unsatisfiability on IMP-SYNTAX .)
(def-term-set (< done | E:Env >) | true .)
(declare-vars (X:List) U (X':List) U (Y:List) U (Y':List) U (Z:List) U (K:Continuation) .)

(add-goal reverse : (<  while (! empty(x)) { y =l first(x) $: y ; x =l rest(x) ; } ~> K
                    | (x |-> TList * y |-> TList * z |-> TList)
                    & (x |-> X * y |-> Y * z |-> Z) >) | (Z) = (rev(Y) $ X) =>
                 (< K
                    | (x |-> TList * y |-> TList * z |-> TList)
                    & (x |-> X' * y |-> Y' * z |-> Z) >) | (Z) = (rev(Y') $ X') /\ (isEmpty(X')) = (true) .)


(start-proof .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
------
------quit .
