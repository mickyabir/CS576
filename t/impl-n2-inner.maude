load ../impl.maude

fmod FIB is
  pr FVP-NAT .

  op fib : Nat -> Nat [metadata "60"] .

  var N : Nat .

  eq fib(0) = 0 .
  eq fib(1) = 1 .
  eq fib(N + 1 + 1) = fib(N + 1) + fib(N) .
endfm

mod FIB+IMPL-SYNTAX+MUL is
  pr FIB .
  pr IMPL-SYNTAX+MUL .
endm

mod FIB+IMPL-SEMANTICS is
  pr FIB .
  pr IMPL-SEMANTICS .
endm

set show advisories off .
set print attribute on .

load ../ext/maude-private/contrib/tools/rltool/rltool.maude

(select FIB+IMPL-SEMANTICS  .)
(use tool conrew for validity          on FIB+IMPL-SYNTAX+MUL with FOFORMSIMPLIFY-IMP-IMPL .)
(use tool varunif for varunif          on FVP-NAT .)
(use tool varsat  for unsatisfiability on IMPL-SYNTAX .)
(def-term-set (< done | E:Env >) | true .)
(declare-vars (X:Nat) U (X':Nat) U (I:Nat) U (I':Nat) U (J:Nat) U (J':Nat) U (A:Nat) U (A':Nat) U (B:Nat) U (B':Nat) .)

(add-goal loop-inner : (< while(j <: x){a = a +: 1 ; j = j +: 1 ;} ~> i = i +: 1 ; ~> while(i <: x){j = 0 ; while(j <: x){a = a +: 1 ; j = j +: 1 ;}i = i +: 1 ;}~> done
                    | x |-> X  *  i |-> I * j |-> J * a |-> A >) | (A) = ((I * X) + J) =>
                 (< while (i <: x) { j = 0 ; while (j <: x) { a = a +: 1 ; j = j +: 1 ; } i = i +: 1 ; } ~> done
                    | x |-> X' *  i |-> I' * j |-> J' * a |-> A' >) | (A') = (I' * X') /\ (X') = (X) .)


(start-proof .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---(auto .)
---quit .
