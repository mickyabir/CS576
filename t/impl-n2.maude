load ../impl.maude
load ../ext/maude-private/contrib/tools/rltool/rltool.maude

(select IMPL-SEMANTICS  .)
(use tool conrew for validity          on IMPL-SYNTAX+MUL with FOFORMSIMPLIFY-IMP-IMPL .)
(use tool varunif for varunif          on FVP-NAT .)
(use tool varsat  for unsatisfiability on IMPL-SYNTAX .)
(def-term-set (< done | E:Env >) | true .)
(declare-vars (X:Nat) U (I:Nat) U (I':Nat) U (J:Nat) U (J':Nat) U (A:Nat) U (A':Nat) .)

(add-axiom loop-inner : (< while(j <: x){a = a +: 1 ; j = j +: 1 ;} ~> i = i +: 1 ; ~> while(i <: x){j = 0 ; while(j <: x){a = a +: 1 ; j = j +: 1 ;}i = i +: 1 ;}~> done
                    | (x |-> TNat *  i |-> TNat * j |-> TNat * a |-> TNat)
                    & (x |-> X  *  i |-> I * j |-> J * a |-> A) >) | (A) = ((I * X) + J) /\ (J <= X) = (true) =>
                 (< while (i <: x) { j = 0 ; while (j <: x) { a = a +: 1 ; j = j +: 1 ; } i = i +: 1 ; } ~> done
                    | (x |-> TNat * i |-> TNat * j |-> TNat * a |-> TNat)
                    & (x |-> X *  i |-> I' * j |-> J' * a |-> A') >) | (A') = (I' * X) .)


(add-goal loop-outer : (< while(i <: x){j = 0 ; while(j <: x){a = a +: 1 ; j = j +: 1 ;}i = i +: 1 ;}~> done
                    | (x |-> TNat * i |-> TNat * j |-> TNat * a |-> TNat)
                    & (x |-> X  *  i |-> I * j |-> J * a |-> A) >) | (A) = (I * X) =>
                 (< done 
                    | (x |-> TNat * i |-> TNat * j |-> TNat * a |-> TNat)
                    & (x |-> X * i |-> I' * j |-> J' * a |-> A') >) | (A') = (X * X) .)

(start-proof .)
(use-axioms loop-outer loop-inner on 1 . )
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
---quit .
