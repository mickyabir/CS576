load ../imp.maude

fmod FIB is
  pr FVP-NAT .

  op fib : Nat -> Nat [metadata "60"] .

  var N : Nat .

  eq fib(0) = 0 .
  eq fib(1) = 1 .
  eq fib(N + 1 + 1) = fib(N + 1) + fib(N) .
endfm

mod FIB+IMP-SYNTAX+MUL is
  pr FIB .
  pr IMP-SYNTAX+MUL .
endm

mod FIB+IMP-SEMANTICS is
  pr FIB .
  pr IMP-SEMANTICS .
endm

set show advisories off .
set print attribute on .

load ../ext/rltool/rltool.maude

(select FIB+IMP-SEMANTICS  .)
(use tool conrew for validity          on FIB+IMP-SYNTAX+MUL with FOFORMSIMPLIFY-IMP-IMPL .)
(use tool varunif for varunif          on FVP-NAT .)
(use tool varsat  for unsatisfiability on IMP-SYNTAX .)
(def-term-set (< done | E:Env >) | true .)
(declare-vars (X:Nat) U (I:Nat) U (I':Nat) U (J:Nat) U (J':Nat) U (A:Nat) U (A':Nat) U (B:Nat) U (B':Nat) .)

(add-goal loop-skip : (< while(j <: x){b = b +: 1 ; j = j +: 1 ;}~> a = a +: b ; i = i +: 1 ; ~> while(i <: x){j = 0 ; b = 0 ; while(j <: x){b = b +: 1 ; j = j +: 1 ;} a = a +: b ; i = i +: 1 ;}~> done
                    | x |-> X  *  i |-> I * j |-> J * a |-> A * b |-> B >) | (B) = (J) =>
                 (< a = a +: b ; i = i +: 1 ; ~> while (i <: x) { j = 0 ; b = 0 ; while (j <: x) { b = b +: 1 ; j = j +: 1 ; } a = a +: b ; i = i +: 1 ; } ~> done
                    | x |-> X  *  i |-> I * j |-> J' * a |-> A' * b |-> B' >) | (B') = (J') /\ (J') = (X) .)


---(add-goal loop-skip : (< while(j <: x){a = a +: 1 ; j = j +: 1 ;}~> i = i +: 1 ; ~> while(i <: x){j = 0 ; while(j <: x){a = a +: 1 ; j = j +: 1 ;}i = i +: 1 ;}~> done
                    ---| x |-> X  *  i |-> I * j |-> J * a |-> A >) | (A) = (I * X + J) =>
                 ---(< while (i <: x) { j = 0 ; while (j <: x) { a = a +: 1 ; j = j +: 1 ; } i = i +: 1 ; } ~> done
                    ---| x |-> X  *  i |-> I * j |-> J' * a |-> A' >) | (A') = (A + X) /\ (I') = (I + 1) .)


---(add-goal loop-inner : (< while (i <: x) { j = 0 ; while (j <: x) { a = a +: 1 ; j = j +: 1 ; } i = i +: 1 ; } ~> done
---                    | x |-> X  *  i |-> I * j |-> J * a |-> A >) | (A) = (I * X + J) =>
---                 (< i = i +: 1 ; while (i <: x) { j = 0 ; while (j <: x) { a = a +: 1 ; j = j +: 1 ; } i = i +: 1 ; } ~> done
---                    | x |-> X  *  i |-> I * j |-> J' * a |-> A' >) | (A') = (A + X) .)


---(add-goal loop : (< while (i <: x) { while (j <: x) { a = a +: 1 ; j = j +: 1 ; } i = i +: 1 ; } ~> done
                    ---| x |-> X  *  i |-> I * j |-> J * a |-> A >) | (A) = (I * X + J) /\ (X < I) = (false) /\ (X < J) = (false) =>
                 ---(< done | x |-> X * i |-> I' * j |-> J' * a |-> A' >) | (A') = (X * X) .)
(start-proof .)

