load ../imp.maude

fmod EXP is
  pr FVP-NAT-MULT . 

  op _^_ : Nat Nat -> Nat [metadata "60"] .

  var M N : Nat .

  eq M ^ 0 = 1 . 
  eq M ^ (N + 1) = M * (M ^ N) .
endfm

mod EXP+IMP-SYNTAX+MUL is
  pr EXP .
  pr IMP-SYNTAX+MUL .
endm

mod EXP+IMP-SEMANTICS is
  pr EXP .
  pr IMP-SEMANTICS .
endm

set show advisories off .
set print attribute on .

load ../ext/rltool/rltool.maude

(select EXP+IMP-SEMANTICS  .)
(use tool conrew for validity          on EXP+IMP-SYNTAX+MUL with FOFORMSIMPLIFY-IMP-IMPL .)
(use tool varunif for varunif          on FVP-NAT .)
(use tool varsat  for unsatisfiability on IMP-SYNTAX .)
(def-term-set (< done | E:Env >) | true .)
(declare-vars (X:Nat) U (X':Nat) U (Y:Nat) U (Y':Nat) U (I:Nat) U (I':Nat) U (J:Nat) U (J':Nat) U (A:Nat) U (A':Nat) U (B:Nat) U (B':Nat) .)

(add-goal loop-inner : (< while(j <: y){a = a +: b ; j = j +: 1 ;} ~> i = i +: 1 ; ~> while(i <: x){j = 0 ; b = a ; a = 0 ; while(j <: y){a = a +: b ; j = j +: 1 ;}i = i +: 1 ;}~> done
                    | x |-> X * y |-> Y  *  i |-> I * j |-> J * a |-> A * b |-> B >) | (A) = (B * J) =>
                 (< while(i <: x){j = 0 ; b = a ; a = 0 ; while(j <: y){a = a +: b ; j = j +: 1 ;}i = i +: 1 ;}~> done | x |-> X' * y |-> Y'  * i |-> I' * j |-> J' * a |-> A' * b |-> B' >) | (A') = (B' * Y') /\ (X) = (X') /\ (Y) = (Y') .)

---(add-goal loop : (< while(i <: x){j = 0 ; b = a ; a = 0 ; while(j <: y){a = a +: b ; j = j +: 1 ;}i = i +: 1 ;}~> done
---                    | x |-> X * y |-> Y *  i |-> I * j |-> J * a |-> A * b |-> B >) | true =>
---                 (< done | x |-> X' * y |-> Y' * i |-> I' * j |-> J' * a |-> A' * b |-> B' >) | true .)

(start-proof .)
