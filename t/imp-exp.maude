load ../imp.maude

fmod EXP is
  pr FVP-NAT-MULT .

  op _^_ : NzNat Nat -> NzNat [metadata "60"] .

  var M : NzNat .
  var N : Nat .

  eq 0 ^ M = 0 .
  eq M ^ 0 = 1 .
  eq M ^ (N + 1) = M * (M ^ N) .
endfm

mod EXP+IMP-SYNTAX+MUL is
  pr EXP .
  pr IMP-SYNTAX+MUL .
endm

mod EXP+IMP-SEMANTICS is
  pr EXP .
  pr IMP-SEMANTICS .
endm

set show advisories off .
set print attribute on .

load ../ext/maude-private/contrib/tools/rltool/rltool.maude

(select EXP+IMP-SEMANTICS  .)
(use tool conrew for validity          on EXP+IMP-SYNTAX+MUL with FOFORMSIMPLIFY-IMP-IMPL .)
(use tool varunif for varunif          on FVP-NAT .)
(use tool varsat  for unsatisfiability on IMP-SYNTAX .)
(def-term-set (< done | E:Env >) | true .)
(declare-vars (X:Nat) U (X':Nat) U (Y:NzNat) U (Y':NzNat) U (I:Nat) U (I':Nat) U (J:Nat) U (J':Nat) U (A:Nat) U (A':Nat) U (B:Nat) U (B':Nat) .)


(add-axiom loop-inner : (< while(j <: y){a = a +: b ; j = j +: 1 ;} ~> i = i +: 1 ; ~> while(i <: x){j = 0 ; b = a ; a = 0 ; while(j <: y){a = a +: b ; j = j +: 1 ;}i = i +: 1 ;}~> done
                    | (mtTE)
                    & (x |-> X * y |-> Y  *  i |-> I * j |-> J * a |-> A * b |-> B) >) | (B) = (Y ^ I)  =>
                 (< while(i <: x){j = 0 ; b = a ; a = 0 ; while(j <: y){a = a +: b ; j = j +: 1 ;}i = i +: 1 ;}~> done
                    | (mtTE)
                    & (x |-> X' * y |-> Y'  * i |-> I' * j |-> J' * a |-> A' * b |-> B') >) |  (I') = (I + 1) /\ (A') = (Y' ^ I') .)

(add-goal loop : (< while(i <: x){j = 0 ; b = a ; a = 0 ; while(j <: y){a = a +: b ; j = j +: 1 ;}i = i +: 1 ;}~> done
                    | (mtTE)
                    & (x |-> X * y |-> Y *  i |-> I * j |-> J * a |-> A * b |-> B) >) | (A) = (Y ^ I) =>
                 (< done
                    | (mtTE)
                    & (x |-> X' * y |-> Y' * i |-> I' * j |-> J' * a |-> A' * b |-> B') >) | (A') = (Y' ^ X')  .)

(start-proof .)
(use-axioms loop loop-inner on 1 .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(auto .)
(case 198 on &29:Nat by (0) U (P:NzNat) .)
(auto .)
(auto .)
quit .
